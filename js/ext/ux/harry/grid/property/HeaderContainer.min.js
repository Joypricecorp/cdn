/**
 * @class Ext.ux.grid.property.HeaderContainer
 * @extends Ext.grid.header.Container
 * 
 * A custom HeaderContainer for the {@link Ext.grid.property.Grid}. Generally
 * it should not need to be used directly.
 * 
 * @author Harald Hanek (c) 2011-2012
 * @license http://harrydeluxe.mit-license.org
 */Ext.define("Ext.ux.grid.property.HeaderContainer",{extend:"Ext.grid.header.Container",nameWidth:115,nameText:"Name",valueText:"Value",dateFormat:"m/j/Y",trueText:"true",falseText:"false",nameColumnCls:Ext.baseCSSPrefix+"grid-property-name",constructor:function(e,t){var n=this,r=[{header:n.nameText,width:e.nameColumnWidth||n.nameWidth,sortable:e.sortableColumns,dataIndex:e.nameField,renderer:Ext.Function.bind(n.renderProp,n),itemId:e.nameField,menuDisabled:!0,groupField:!0,tdCls:n.nameColumnCls},{header:n.valueText,renderer:Ext.Function.bind(n.renderCell,n),getEditor:Ext.Function.bind(n.getCellEditor,n),sortable:e.sortableColumns,flex:1,fixed:!0,dataIndex:e.valueField,itemId:e.valueField,menuDisabled:!0},{header:e.groupField,hidden:!0,sortable:e.sortableColumns,dataIndex:e.groupField,itemId:e.groupField}];e.columns&&(r=r.concat(Ext.isArray(e.columns)?e.columns:[e.columns]));n.grid=e;n.store=t;n.callParent([{items:r}])},getCellEditor:function(e){return this.grid.getCellEditor(e,this)},renderProp:function(e,t,n){return n.data.text||this.getPropertyName(e)},renderCell:function(e,t,n){var r=this,i=r.grid.customRenderers[n.get(r.grid.nameField)],s=e,o=n.data.renderer!=""?n.data.renderer:null;i=r.grid.customRenderers[o]||o||r.grid.customRenderers[n.get(r.grid.nameField)];var u=r.grid.customEditors[n.get("editor")];if(!n.get("renderer")&&u){var a=u.field||u;if(a.rendered&&a.rawValue)return a.rawValue}if(i)return i.apply(r,arguments);Ext.isDate(e)?s=r.renderDate(e):Ext.isBoolean(e)&&(s=r.renderBool(e));return Ext.util.Format.htmlEncode(s)},renderDate:Ext.util.Format.date,renderBool:function(e){return this[e?"trueText":"falseText"]},getPropertyName:function(e){var t=this.grid.propertyNames;return t&&t[e]?t[e]:e}});